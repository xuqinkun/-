正则表达式：
关键字：REGEXP
select prod_id, prod_name from products where prod_name like '1000' ORDER BY prod_name;
select prod_id, prod_name from products where prod_name REGEXP '1000' ORDER BY prod_name;
select prod_id, prod_name from products where prod_name REGEXP '.000' ORDER BY prod_name;
关键字：BINARY（区分大小写）
or匹配：
regex1|regex2
SELECT prod_name
FROM products 
WHERE prod_name REGEXP '1000|2000'
ORDER BY prod_name;

SELECT prod_name
FROM products 
WHERE prod_name REGEXP '[1|2|3] Ton'
ORDER BY prod_name;

第10章 创建计算字段
Concat()
SELECT Concat(vend_name, '(', vend_country, ')') AS vend_title
FROM vendors
ORDER BY vend_name;

SELECT vend_name,vend_country
FROM vendors;

10.3 执行算术计算
SELECT prod_id, quantity, item_price, quantity*item_price AS total
FROM orderitems
WHERE order_num = 20005;

11章
SELECT vend_name, Upper(vend_name) AS vend_name_upcase
FROM vendors
ORDER BY vend_name;

SELECT cust_name, cust_contact
FROM customers
WHERE Soundex(cust_contact) = Soundex('Y Lie');

SELECT cust_id, order_num,order_date
FROM orders
WHERE order_date = '2005-09-01';

Date：提取日期进行比较
SELECT cust_id, order_num, order_date
FROM orders
WHERE Year(order_date) = '2005';
提取9月的数据
a.
SELECT cust_id, order_num, order_date
FROM orders
WHERE Year(order_date) = '2005' AND Month(order_date) = '09';
b.
SELECT cust_id, order_num, order_date
FROM orders
WHERE order_date BETWEEN '2005-09-01' AND '2005-09-30';

第十二章 聚集函数
AVG 
SELECT AVG(prod_price) AS avg_price
FROM products;

SELECT COUNT(cust_email) AS num_cust
FROM customers;

SELECT MAX(prod_price) AS max_price
FROM products;

SELECT MIN(prod_price) AS min_price
FROM products;

SELECT SUM(quantity) AS items_ordered
FROM orderitems
WHERE order_num = 20005;

SELECT SUM(item_price*quantity) AS total_price
FROM orderitems
WHERE order_num = 20005;

SELECT AVG(distinct prod_price) AS avg_price
FROM products
WHERE vend_id = 1003;

13 分组
SELECT vend_id, COUNT(*) AS num_prods
FROM products
GROUP BY vend_id WITH ROLLUP;
13.3 过滤分组
SELECT cust_id, COUNT(*) AS orders
FROM orders
GROUP BY cust_id
HAVING COUNT(*) >= 2;

SELECT vend_id, COUNT(*) AS num_prods
FROM products
WHERE prod_price >= 10
GROUP BY vend_id
HAVING COUNT(*) >= 2;

SELECT order_num, SUM(quantity*item_price) AS ordertotal
FROM orderitems
GROUP BY order_num
HAVING ordertotal >= 50
ORDER BY ordertotal;

SELECT cust_name, cust_contact
FROM customers
WHERE cust_id IN (SELECT cust_id
	FROM orders
	WHERE order_num IN (SELECT order_num
		FROM orderitems
		WHERE prod_id = 'TNT2'));

SELECT cust_name, cust_state,
       (SELECT count(*) 
        FROM orders
        WHERE orders.cust_id = customers.cust_id) AS orders
FROM customers
ORDER BY cust_name; 

15 联结
SELECT vend_name, prod_name, prod_price
FROM vendors, products
WHERE vendors.vend_id = products.vend_id
ORDER BY vend_name, prod_name;

SELECT vend_name, prod_name, prod_price
FROM vendors INNER JOIN products
ON vendors.vend_id = products.vend_id;

SELECT cust_name,cust_contact
FROM customers, orders, orderitems
WHERE customers.cust_id = orders.cust_id
	AND orderitems.order_num = orders.order_num
	AND prod_id = 'TNT2';

16章
自联结
SELECT p1.prod_id, p1.prod_name
FROM products AS p1, products AS p2
WHERE p1.vend_id = p2.vend_id
	AND p2.prod_id = 'DTNTR';
外部联结 LEFT/RIGHT OUTER JOIN
SELECT c.cust_id, o.order_num
FROM customers AS c LEFT OUTER JOIN orders AS o
	ON c.cust_id = o.cust_id;

SELECT c.cust_id, o.order_num
FROM customers AS c RIGHT OUTER JOIN orders AS o
	ON c.cust_id = o.cust_id;

SELECT customers.cust_name, 
	   customers.cust_id,
	   COUNT(orders.order_num) AS num_ord
FROM customers INNER JOIN orders
  ON customers.cust_id = orders.cust_id
GROUP BY customers.cust_id;

SELECT customers.cust_name, 
	   customers.cust_id,
	   COUNT(orders.order_num) AS num_ord
FROM customers LEFT OUTER JOIN orders
  ON customers.cust_id = orders.cust_id
GROUP BY customers.cust_id;

17 组合查询
SELECT vend_id, prod_id, prod_price
FROM products
WHERE prod_price <= 5
UNION ALL
SELECT vend_id, prod_id, prod_price
FROM products
WHERE vend_id IN (1001,1002);

SELECT vend_id, prod_id, prod_price
FROM products
WHERE prod_price <= 5
UNION ALL
SELECT vend_id, prod_id, prod_price
FROM products
WHERE vend_id IN (1001,1002)
ORDER BY vend_id, prod_price;

23 存储过程
DELIMITER //
CREATE PROCEDURE productpricing()
BEGIN
	SELECT Avg(prod_price) AS priceaverage
	FROM products;
END //
DELIMITER ;

CALL productpricing();

DROP PROCEDURE  IF EXISTS productpricing;

DELIMITER //
CREATE PROCEDURE productpricing(
	OUT pl DECIMAL(8,2),
	OUT ph DECIMAL(8,2),
	OUT pa DECIMAL(8,2)
)
BEGIN
	SELECT Min(prod_price) INTO pl
	FROM products;
	SELECT Max(prod_price) INTO ph
	FROM products;
	SELECT Avg(prod_price) INTO pa
	FROM products;
END //
DELIMITER ;

CALL productpricing(@pricelow, @pricehigh, @priceaverage);

SELECT @pricelow, @pricehigh, @priceaverage;

DELIMITER //
CREATE PROCEDURE ordertotal(
	IN onumber INT,
	OUT ototal DECIMAL(8, 2)
)
BEGIN 
	SELECT Sum(item_price*quantity)
	FROM orderitems
	WHERE order_num = onumber INTO ototal;
END //
DELIMITER ;

CALL ordertotal(20005, @total);


DROP PROCEDURE  IF EXISTS ordertotal;
DELIMITER //
CREATE PROCEDURE ordertotal(
	IN onumber INT,
	IN taxable BOOLEAN,
	OUT ototal DECIMAL(8,2)
) COMMENT 'Obtain order total, optionally adding tax'
BEGIN
	DECLARE total DECIMAL(8,2);
	DECLARE taxrate INT DEFAULT 6;

	SELECT Sum(item_price*quantity)
	FROM orderitems
	WHERE order_num = onumber
	INTO total;

	IF taxable THEN
		SELECT total + (total/100 * taxrate) INTO total;
	END IF;

	SELECT total INTO ototal;
END //

DELIMITER ;

CALL ordertotal(20005, 0, @total);
SELECT @total;

CALL ordertotal(20005, 1, @total);
SELECT @total;

SHOW CREATE PROCEDURE ordertotal;

24. 游标
DROP PROCEDURE  IF EXISTS processorders;
DELIMITER //
CREATE PROCEDURE processorders()
BEGIN
	DECLARE o INT;

	DECLARE ordernumbers CURSOR
	FOR
	SELECT order_num FROM orders;

	OPEN ordernumbers;

	FETCH ordernumbers INTO o;

	CLOSE ordernumbers;
END //
DELIMITER ;

-------------------------------------
DROP PROCEDURE  IF EXISTS processorders;
DELIMITER //
CREATE PROCEDURE processorders()
BEGIN
	DECLARE done BOOLEAN DEFAULT 0;
	DECLARE o INT;

	DECLARE ordernumbers CURSOR
	FOR
	SELECT order_num FROM orders;

	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET DONE=1;

	OPEN ordernumbers;

	REPEAT
		FETCH ordernumbers INTO o;
	UNTIL done END REPEAT;

	CLOSE ordernumbers;
END //
DELIMITER ;

-------------------------------------
DROP PROCEDURE  IF EXISTS processorders;
DELIMITER //
CREATE PROCEDURE processorders()
BEGIN
	DECLARE done BOOLEAN DEFAULT 0;
	DECLARE o INT;
	DECLARE t DECIMAL(8, 2);

	DECLARE ordernumbers CURSOR
	FOR
	SELECT order_num FROM orders;

	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET DONE=1;

	CREATE TABLE IF NOT EXISTS crashcourse.ordertotals(
		order_num INT, 
		total DECIMAL(8, 2)
	);

	OPEN ordernumbers;

	REPEAT
		FETCH ordernumbers INTO o;
		CALL ordertotal(o, 1, t);
		INSERT INTO crashcourse.ordertotals(order_num, total) VALUES(o, t);

	UNTIL done END REPEAT;

	CLOSE ordernumbers;
END //
DELIMITER ;

CALL processorders();

select * from ordertotals;

25 Trigger
CREATE TRIGGER newproduct AFTER INSERT ON products
FOR EACH ROW SELECT 'Product added' INTO @arg;

INSERT INTO products VALUES('comp', 1001, 'computer', 9999, '');
SELECT @arg;

DROP TRIGGER neworder;
CREATE TRIGGER neworder AFTER INSERT ON orders
FOR EACH ROW SELECT NEW.order_num INTO @order_num;

INSERT INTO orders(order_date, cust_id) VALUES(Now(), 10001);
SELECT @order_num;
